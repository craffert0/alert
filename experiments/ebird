#! /opt/homebrew/bin/python3

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2025 Colin Rafferty <colin@rafferty.net>

# https://documenter.getpostman.com/view/664302/S1ENwy59?version=latest

import json
import os.path
import re
from http.client import *
from pathlib import Path


lat = 40.67
lng = -73.97


def generate_unique_id(x):
    x["colin_id"] = f'{x["obsId"]}.{x["subId"]}'
    return x


class Server:
    def __init__(self):
        rc = json.loads(Path(os.path.expanduser("~/.ebirdrc")).read_text())
        self.headers = {"x-ebirdapitoken": rc["apikey"]}
        self.conn = HTTPSConnection("api.ebird.org")

    def get(self, path, params=""):
        fullpath = "/v2/" + path + "?fmt=json" + params
        req = self.conn.request("GET", fullpath, headers=self.headers)
        response = self.conn.getresponse()
        if response.status != 200:
            raise RuntimeError(f"{response.status}: {response.reason}")
        return json.loads(response.read())

    def hotspots(self):
        return self.get("ref/hotspot/geo", f"&lat={lat}&lng={lng}&dist=3.7")

    def notable(self):
        return [
            generate_unique_id(x)
            for x in self.get(
                "data/obs/geo/recent/notable",
                f"&lat={lat}&lng={lng}&dist=5&back=2&detail=full",
            )
        ]

    def taxonomy(self, species):
        return self.get("ref/taxonomy/ebird", f"&species={species}")


def main():
    server = Server()
    # print(json.dumps(server.taxonomy("louwat,commer"), indent=2))
    print(json.dumps(server.notable(), indent=2))


if __name__ == "__main__":
    main()
