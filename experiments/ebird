#! /opt/homebrew/bin/python3

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2025 Colin Rafferty <colin@rafferty.net>

# https://documenter.getpostman.com/view/664302/S1ENwy59?version=latest

import json
import os.path
import re
from http.client import *
from pathlib import Path


lat = 40.67
lng = -73.97
regionCode = "US-NY-047"


def generate_unique_id(x):
    x["colin_id"] = f'{x["obsId"]}.{x["subId"]}'
    return x


class Server:
    def __init__(self):
        rc = json.loads(Path(os.path.expanduser("~/.ebirdrc")).read_text())
        self.headers = {"x-ebirdapitoken": rc["apikey"]}
        self.conn = HTTPSConnection("api.ebird.org")

    def get(self, path, params=""):
        fullpath = "/v2/" + path + "?fmt=json" + params
        req = self.conn.request("GET", fullpath, headers=self.headers)
        response = self.conn.getresponse()
        if response.status != 200:
            raise RuntimeError(f"{response.status}: {response.reason}")
        return json.loads(response.read())

    def hotspots(self):
        return self.get("ref/hotspot/geo", f"&lat={lat}&lng={lng}&dist=3.7")

    def notable(self):
        return [
            generate_unique_id(x)
            for x in self.get(
                "data/obs/geo/recent/notable",
                f"&lat={lat}&lng={lng}&dist=50&back=2&detail=full",
            )
        ]

    def nearby(self, species):
        return self.get(
            f"data/obs/geo/recent/{species}",
            f"&lat={lat}&lng={lng}&dist=10&back=2&detail=full",
        )

    def nearest(self, species):
        return self.get(
            f"data/nearest/geo/recent/{species}",
            f"&lat={lat}&lng={lng}&dist=10&back=2",
        )

    def recent(self):
        return self.get(
            "data/obs/geo/recent",
            f"&lat={lat}&lng={lng}&dist=5&back=4",
        )

    def species(self, regionCode):
        return self.get("product/spplist/" + regionCode)

    def regionobs(self, regionCode):
        return self.get(f"data/obs/{regionCode}/recent")

    def region(self, regionCode):
        return self.get("ref/region/info/" + regionCode)

    def checklist(self, subId):
        return self.get("product/checklist/view/" + subId)

    def taxonomy(self, species):
        return self.get("ref/taxonomy/ebird", f"&species={species}")


def main():
    server = Server()
    # print(json.dumps(server.nearest("yebfly"), indent=2))
    print(json.dumps(server.species("US-NY"), indent=2))
    # print(json.dumps(server.nearby("yebfly"), indent=2))
    # print(json.dumps(server.regionobs(regionCode), indent=2))
    # print(json.dumps(server.taxonomy("louwat,commer"), indent=2))
    # print(json.dumps(server.notable(), indent=2))
    # print(json.dumps(server.checklist("S222156738"), indent=2))


if __name__ == "__main__":
    main()


# {
#   "speciesCode": "chiswi",
#   "comName": "Chimney Swift",
#   "sciName": "Chaetura pelagica",
#   "locId": "L109516",
#   "locName": "Prospect Park",
#   "obsDt": "2025-03-31 11:05",
#   "howMany": 8,
#   "lat": 40.6602841,
#   "lng": -73.9689534,
#   "obsValid": false,
#   "obsReviewed": false,
#   "locationPrivate": false,
#   "subId": "S222156738",
#   "subnational2Code": "US-NY-047",
#   "subnational2Name": "Kings",
#   "subnational1Code": "US-NY",
#   "subnational1Name": "New York",
#   "countryCode": "US",
#   "countryName": "United States",
#   "userDisplayName": "Susie Dippel",
#   "obsId": "OBS3012607309",
#   "checklistId": "CL23822",
#   "presenceNoted": false,
#   "hasComments": false,
#   "firstName": "Susie",
#   "lastName": "Dippel",
#   "hasRichMedia": false,
#   "colin_id": "OBS3012607309.S222156738"
# }
